// Code generated by "requestgen -method GET -url /tiingo/daily/:ticker/prices -type PriceRequest -responseType []PriceResponse"; DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"time"
)

func (p *PriceRequest) SetStartDate(StartDate time.Time) *PriceRequest {
	p.StartDate = &StartDate
	return p
}

func (p *PriceRequest) SetEndDate(EndDate time.Time) *PriceRequest {
	p.EndDate = &EndDate
	return p
}

func (p *PriceRequest) SetResampleFreq(ResampleFreq string) *PriceRequest {
	p.ResampleFreq = &ResampleFreq
	return p
}

func (p *PriceRequest) SetSort(Sort string) *PriceRequest {
	p.Sort = &Sort
	return p
}

func (p *PriceRequest) SetResponseFormat(ResponseFormat string) *PriceRequest {
	p.ResponseFormat = &ResponseFormat
	return p
}

func (p *PriceRequest) SetColumns(Columns []string) *PriceRequest {
	p.Columns = &Columns
	return p
}

func (p *PriceRequest) SetTicker(Ticker string) *PriceRequest {
	p.Ticker = Ticker
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PriceRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PriceRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check StartDate field -> json key startDate
	if p.StartDate != nil {
		StartDate := *p.StartDate

		// assign parameter of StartDate
		params["startDate"] = StartDate
	} else {
	}
	// check EndDate field -> json key endDate
	if p.EndDate != nil {
		EndDate := *p.EndDate

		// assign parameter of EndDate
		params["endDate"] = EndDate
	} else {
	}
	// check ResampleFreq field -> json key resampleFreq
	if p.ResampleFreq != nil {
		ResampleFreq := *p.ResampleFreq

		// assign parameter of ResampleFreq
		params["resampleFreq"] = ResampleFreq
	} else {
	}
	// check Sort field -> json key sort
	if p.Sort != nil {
		Sort := *p.Sort

		// assign parameter of Sort
		params["sort"] = Sort
	} else {
	}
	// check ResponseFormat field -> json key format
	if p.ResponseFormat != nil {
		ResponseFormat := *p.ResponseFormat

		// assign parameter of ResponseFormat
		params["format"] = ResponseFormat
	} else {
	}
	// check Columns field -> json key columns
	if p.Columns != nil {
		Columns := *p.Columns

		// assign parameter of Columns
		params["columns"] = Columns
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PriceRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PriceRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PriceRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check Ticker field -> json key ticker
	Ticker := p.Ticker

	// assign parameter of Ticker
	params["ticker"] = Ticker

	return params, nil
}

func (p *PriceRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PriceRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PriceRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PriceRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (p *PriceRequest) Do(ctx context.Context) ([]PriceResponse, error) {

	// empty params for GET operation
	var params interface{}
	query, err := p.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	apiURL := "/tiingo/daily/:ticker/prices"
	slugs, err := p.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = p.applySlugsToUrl(apiURL, slugs)

	req, err := p.Client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.Client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []PriceResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
